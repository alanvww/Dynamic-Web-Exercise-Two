{"version":3,"sources":["components/WeatherCard.js","components/WeatherImage.js","containers/home.js","components/API_KEY.js","App.js","reportWebVitals.js","index.js"],"names":["WeatherCard","cloudiness","currentTemp","highTemp","humidity","lowTemp","weatherDescription","weatherType","windSpeed","className","WeatherImage","icon","faCloud","faSun","faCloudRain","faSnowflake","Home","useState","city","setCity","weatherData","setWeatherData","query","URLSearchParams","useLocation","search","URL","useEffect","cityValue","get","axios","then","response","data","console","log","catch","error","useMemo","clouds","all","Math","round","main","temp","temp_max","temp_min","weather","description","wind","speed","href","style","textShadow","color","App","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wQAkDeA,MAhDf,YASI,IARHC,EAQE,EARFA,WACAC,EAOE,EAPFA,YACAC,EAME,EANFA,SACAC,EAKE,EALFA,SACAC,EAIE,EAJFA,QACAC,EAGE,EAHFA,mBAGE,IAFFC,mBAEE,kBADFC,EACE,EADFA,UAEA,OACC,yBAASC,UAAU,cAAnB,SACC,sBAAKA,UAAU,YAAf,UACC,0BAASA,UAAU,OAAnB,UACC,iDACA,wBAAQA,UAAU,kBAAlB,SAAqCF,OAEtC,0BAASE,UAAU,OAAnB,UACC,qDACA,yBAAQA,UAAU,kBAAlB,UAAqCP,EAArC,cAED,0BAASO,UAAU,OAAnB,UACC,4CACA,yBAAQA,UAAU,kBAAlB,UACEJ,EADF,WACgBF,EADhB,cAID,0BAASM,UAAU,OAAnB,UACC,4CACA,wBAAQA,UAAU,kBAAlB,SAAqCR,OAEtC,0BAASQ,UAAU,OAAnB,UACC,0CACA,wBAAQA,UAAU,kBAAlB,SAAqCL,OAEtC,0BAASK,UAAU,OAAnB,UACC,6CACA,wBAAQA,UAAU,kBAAlB,SAAqCH,OAEtC,0BAASG,UAAU,OAAnB,UACC,4CACA,yBAAQA,UAAU,kBAAlB,UAAqCD,EAArC,kB,cCnBUE,MAff,YACC,OADsC,EAAfH,aAUtB,QACC,OAAO,cAAC,IAAD,CAAiBI,KAAMC,MAP/B,IAAK,QACJ,OAAO,cAAC,IAAD,CAAiBD,KAAME,MAC/B,IAAK,OACJ,OAAO,cAAC,IAAD,CAAiBF,KAAMG,MAC/B,IAAK,OACJ,OAAO,cAAC,IAAD,CAAiBH,KAAMI,QCoIlBC,MAzIf,WACC,MAAwBC,qBAAxB,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAsCF,qBAAtC,mBAAOG,EAAP,KAAoBC,EAApB,KAEIC,EAPG,IAAIC,gBAAgBC,cAAcC,QASnCC,EAAG,4DAAwDR,EAAxD,kBCnBU,oCDqBnBS,qBAAU,WACT,IAAMC,EAAYN,EAAMO,IAAI,QAC5BV,EAAQS,KACN,CAACN,IAEJK,qBAAU,WAELT,GAEHY,IACED,IAAIH,GACJK,MAAK,SAAUC,GAEfX,EAAeW,EAASC,MACxBC,QAAQC,IAAIH,MAEZI,OAAM,SAAUC,GAEhBH,QAAQC,IAAIE,QAGb,CAACX,EAAKR,IAET,MASIoB,mBAAQ,WAEX,OAAKlB,EACE,CACNnB,WAAYmB,EAAYmB,OAAOC,IAC/BtC,YAAauC,KAAKC,MAAMtB,EAAYuB,KAAKC,KAAO,QAChDzC,SAAUsC,KAAKC,MAAMtB,EAAYuB,KAAKE,SAAW,QACjDzC,SAAUgB,EAAYuB,KAAKvC,SAC3BC,QAASoC,KAAKC,MAAMtB,EAAYuB,KAAKG,SAAW,QAChDxC,mBAAoBc,EAAY2B,QAAQ,GAAGC,YAC3CzC,YAAaa,EAAY2B,QAAQ,GAAGJ,KACpCnC,UAAWY,EAAY6B,KAAKC,OATJ,KAWvB,CAAC9B,IArBHnB,EADD,EACCA,WACAC,EAFD,EAECA,YACAC,EAHD,EAGCA,SACAC,EAJD,EAICA,SACAC,EALD,EAKCA,QACAC,EAND,EAMCA,mBACAC,EAPD,EAOCA,YACAC,EARD,EAQCA,UAgBD,OACC,uBAAMC,UAAU,MAAhB,UACC,mCACC,8BACC,qBAAIA,UAAU,WAAd,UACC,6BACC,mBACC0C,KAAK,uCACL1C,UAAoB,UAATS,GAAoB,SAFhC,qBAOD,6BACC,mBACCiC,KAAK,yCACL1C,UAAoB,YAATS,GAAsB,SAFlC,uBAOD,6BACC,mBACCiC,KAAK,0CACL1C,UAAoB,aAATS,GAAuB,SAFnC,wBAOD,6BACC,mBACCiC,KAAK,wCACL1C,UAAoB,WAATS,GAAqB,SAFjC,sBAOD,6BACC,mBACCiC,KAAK,yCACL1C,UAAoB,YAATS,GAAsB,SAFlC,4BASH,oBACCT,UAAU,WACV2C,MAAO,CACNC,WAAW,gBAAD,OAAkB,IAAMpD,EAAxB,YAAsC,IAAMA,EAA5C,YACT,IAAMA,EADG,MAHZ,SAQEiB,IAEF,yBACCT,UAAU,cACV2C,MAAO,CACNE,MAAM,QAAD,OAAU,IAAMrD,EAAa,EAA7B,YAAkC,IAAMA,EAAa,EAArD,YACJ,IAAMA,EAAa,EADf,OAHP,SAQC,cAAC,EAAD,CAAcM,YAAaA,SAG7B,cAAC,EAAD,CACCN,WAAYA,EACZC,YAAaA,EACbC,SAAUA,EACVC,SAAUA,EACVC,QAASA,EACTC,mBAAoBA,EACpBC,YAAaA,EACbC,UAAWA,QEjIA+C,MAXf,WACC,OACC,cAAC,IAAD,UACC,cAAC,IAAD,UACC,cAAC,IAAD,CAAOC,KAAK,IAAZ,SACC,cAAC,EAAD,WCGUC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB5B,MAAK,YAAkD,IAA/C6B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.9b73637c.chunk.js","sourcesContent":["import React from 'react';\n\nfunction WeatherCard({\n\tcloudiness,\n\tcurrentTemp,\n\thighTemp,\n\thumidity,\n\tlowTemp,\n\tweatherDescription,\n\tweatherType = `Unknown`,\n\twindSpeed,\n}) {\n\treturn (\n\t\t<section className=\"WeatherCard\">\n\t\t\t<div className=\"container\">\n\t\t\t\t<section className=\"item\">\n\t\t\t\t\t<h2>Current Weather</h2>\n\t\t\t\t\t<strong className=\"highlightedData\">{weatherType}</strong>\n\t\t\t\t</section>\n\t\t\t\t<section className=\"item\">\n\t\t\t\t\t<h2>Current Temperature</h2>\n\t\t\t\t\t<strong className=\"highlightedData\">{currentTemp}°C</strong>\n\t\t\t\t</section>\n\t\t\t\t<section className=\"item\">\n\t\t\t\t\t<h2>Low - High</h2>\n\t\t\t\t\t<strong className=\"highlightedData\">\n\t\t\t\t\t\t{lowTemp}°C - {highTemp}°C\n\t\t\t\t\t</strong>\n\t\t\t\t</section>\n\t\t\t\t<section className=\"item\">\n\t\t\t\t\t<h2>Cloudiness</h2>\n\t\t\t\t\t<strong className=\"highlightedData\">{cloudiness}</strong>\n\t\t\t\t</section>\n\t\t\t\t<section className=\"item\">\n\t\t\t\t\t<h2>Humidity</h2>\n\t\t\t\t\t<strong className=\"highlightedData\">{humidity}</strong>\n\t\t\t\t</section>\n\t\t\t\t<section className=\"item\">\n\t\t\t\t\t<h2>Description</h2>\n\t\t\t\t\t<strong className=\"highlightedData\">{weatherDescription}</strong>\n\t\t\t\t</section>\n\t\t\t\t<section className=\"item\">\n\t\t\t\t\t<h2>Wind Speed</h2>\n\t\t\t\t\t<strong className=\"highlightedData\">{windSpeed}mph</strong>\n\t\t\t\t</section>\n\t\t\t</div>\n\t\t</section>\n\t);\n}\n\nexport default WeatherCard;\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n\tfaCloud,\n\tfaSun,\n\tfaCloudRain,\n\tfaSnowflake,\n} from '@fortawesome/free-solid-svg-icons';\n\nfunction WeatherImage({ weatherType }) {\n\tswitch (weatherType) {\n\t\tcase 'Clouds':\n\t\t\treturn <FontAwesomeIcon icon={faCloud} />;\n\t\tcase 'Clear':\n\t\t\treturn <FontAwesomeIcon icon={faSun} />;\n\t\tcase 'Rain' || 'Thunderstorm':\n\t\t\treturn <FontAwesomeIcon icon={faCloudRain} />;\n\t\tcase 'Snow':\n\t\t\treturn <FontAwesomeIcon icon={faSnowflake} />;\n\t\tdefault:\n\t\t\treturn <FontAwesomeIcon icon={faCloud} />;\n\t}\n}\n\nexport default WeatherImage;\n","import React, { useMemo, useEffect, useState } from 'react';\nimport { useLocation } from 'react-router';\nimport axios from 'axios';\nimport WeatherCard from '../components/WeatherCard';\nimport { API_KEY } from '../components/API_KEY';\nimport WeatherImage from '../components/WeatherImage';\n\n// URL Search Params... localhost:3000/?city=paris\n//abstract away URL Search Params here to make it easier to use\nfunction useQuery() {\n\treturn new URLSearchParams(useLocation().search);\n}\n\nfunction Home() {\n\tconst [city, setCity] = useState();\n\tconst [weatherData, setWeatherData] = useState();\n\n\tlet query = useQuery();\n\n\tconst URL = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}`;\n\n\tuseEffect(() => {\n\t\tconst cityValue = query.get('city');\n\t\tsetCity(cityValue);\n\t}, [query]);\n\n\tuseEffect(() => {\n\t\t// Get weather data from weather API\n\t\tif (city) {\n\t\t\t// Make a request for a user with a given ID\n\t\t\taxios\n\t\t\t\t.get(URL)\n\t\t\t\t.then(function (response) {\n\t\t\t\t\t// handle success\n\t\t\t\t\tsetWeatherData(response.data);\n\t\t\t\t\tconsole.log(response);\n\t\t\t\t})\n\t\t\t\t.catch(function (error) {\n\t\t\t\t\t// handle error\n\t\t\t\t\tconsole.log(error);\n\t\t\t\t});\n\t\t}\n\t}, [URL, city]);\n\n\tconst {\n\t\tcloudiness,\n\t\tcurrentTemp,\n\t\thighTemp,\n\t\thumidity,\n\t\tlowTemp,\n\t\tweatherDescription,\n\t\tweatherType,\n\t\twindSpeed,\n\t} = useMemo(() => {\n\t\t// This is where we process data\n\t\tif (!weatherData) return {};\n\t\treturn {\n\t\t\tcloudiness: weatherData.clouds.all,\n\t\t\tcurrentTemp: Math.round(weatherData.main.temp - 273.15),\n\t\t\thighTemp: Math.round(weatherData.main.temp_max - 273.15),\n\t\t\thumidity: weatherData.main.humidity,\n\t\t\tlowTemp: Math.round(weatherData.main.temp_min - 273.15),\n\t\t\tweatherDescription: weatherData.weather[0].description,\n\t\t\tweatherType: weatherData.weather[0].main,\n\t\t\twindSpeed: weatherData.wind.speed,\n\t\t};\n\t}, [weatherData]);\n\n\treturn (\n\t\t<main className=\"App\">\n\t\t\t<header>\n\t\t\t\t<nav>\n\t\t\t\t\t<ul className=\"cityList\">\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<a\n\t\t\t\t\t\t\t\thref=\"Dynamic-Web-Exercise-Two/?city=osaka\"\n\t\t\t\t\t\t\t\tclassName={city === 'osaka' && 'Active'}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tOsaka\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<a\n\t\t\t\t\t\t\t\thref=\"Dynamic-Web-Exercise-Two/?city=chicago\"\n\t\t\t\t\t\t\t\tclassName={city === 'chicago' && 'Active'}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tChicago\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<a\n\t\t\t\t\t\t\t\thref=\"Dynamic-Web-Exercise-Two/?city=hongkong\"\n\t\t\t\t\t\t\t\tclassName={city === 'hongkong' && 'Active'}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tHongkong\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<a\n\t\t\t\t\t\t\t\thref=\"Dynamic-Web-Exercise-Two/?city=London\"\n\t\t\t\t\t\t\t\tclassName={city === 'London' && 'Active'}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tLondon\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<a\n\t\t\t\t\t\t\t\thref=\"Dynamic-Web-Exercise-Two/?city=Chengdu\"\n\t\t\t\t\t\t\t\tclassName={city === 'Chengdu' && 'Active'}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tChengdu\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t</ul>\n\t\t\t\t</nav>\n\t\t\t\t<h1\n\t\t\t\t\tclassName=\"Location\"\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\ttextShadow: `0 0 10px rgb(${255 - cloudiness},${255 - cloudiness},${\n\t\t\t\t\t\t\t255 - cloudiness\n\t\t\t\t\t\t})`,\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{city}\n\t\t\t\t</h1>\n\t\t\t\t<section\n\t\t\t\t\tclassName=\"WeatherIcon\"\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tcolor: `rgba(${255 - cloudiness / 2},${255 - cloudiness / 2},${\n\t\t\t\t\t\t\t255 - cloudiness / 2\n\t\t\t\t\t\t},1`,\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<WeatherImage weatherType={weatherType} />\n\t\t\t\t</section>\n\t\t\t</header>\n\t\t\t<WeatherCard\n\t\t\t\tcloudiness={cloudiness}\n\t\t\t\tcurrentTemp={currentTemp}\n\t\t\t\thighTemp={highTemp}\n\t\t\t\thumidity={humidity}\n\t\t\t\tlowTemp={lowTemp}\n\t\t\t\tweatherDescription={weatherDescription}\n\t\t\t\tweatherType={weatherType}\n\t\t\t\twindSpeed={windSpeed}\n\t\t\t/>\n\t\t</main>\n\t);\n}\n\nexport default Home;\n","export const API_KEY = `70b0bdefd6b84baa7449b2155d0dd184`;\n","import { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\nimport './App.css';\nimport Home from './containers/home';\n\nfunction App() {\n\treturn (\n\t\t<Router>\n\t\t\t<Switch>\n\t\t\t\t<Route path=\"/\">\n\t\t\t\t\t<Home />\n\t\t\t\t</Route>\n\t\t\t</Switch>\n\t\t</Router>\n\t);\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}